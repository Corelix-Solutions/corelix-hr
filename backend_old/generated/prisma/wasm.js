
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.EmployeesScalarFieldEnum = {
  employeeId: 'employeeId',
  employee_FirstName: 'employee_FirstName',
  employee_LastName: 'employee_LastName',
  employee_Address: 'employee_Address',
  employee_PhoneNumber: 'employee_PhoneNumber',
  employee_HireDate: 'employee_HireDate',
  employee_Gender: 'employee_Gender',
  employee_Position: 'employee_Position',
  employee_Department: 'employee_Department',
  employee_Salary: 'employee_Salary',
  employee_CivilStatus: 'employee_CivilStatus',
  employee_Status: 'employee_Status',
  employee_ShiftSchedule: 'employee_ShiftSchedule',
  employee_TIN: 'employee_TIN',
  employee_SSSNumber: 'employee_SSSNumber',
  employee_PhilhealthNumber: 'employee_PhilhealthNumber',
  employee_emergencyContactName: 'employee_emergencyContactName',
  employee_emergencyContactNumber: 'employee_emergencyContactNumber',
  employee_imageURL: 'employee_imageURL',
  password: 'password',
  mustChangePassword: 'mustChangePassword'
};

exports.Prisma.Employees_attendanceScalarFieldEnum = {
  attendance_id: 'attendance_id',
  shiftSchedule: 'shiftSchedule',
  employeeId: 'employeeId',
  clockIn: 'clockIn',
  clockOut: 'clockOut'
};

exports.Prisma.Employee_requestScalarFieldEnum = {
  leaverequest_id: 'leaverequest_id',
  leaverequest_reason: 'leaverequest_reason',
  leaverequest_status: 'leaverequest_status',
  leave: 'leave',
  employeeId: 'employeeId'
};

exports.Prisma.Hr_employeeScalarFieldEnum = {
  hrId: 'hrId',
  humanresources_firstname: 'humanresources_firstname',
  humanresources_lastname: 'humanresources_lastname',
  employee_Gender: 'employee_Gender',
  hr_position: 'hr_position',
  leave: 'leave',
  leaverequest_reason: 'leaverequest_reason',
  leaverequest_status: 'leaverequest_status',
  password: 'password',
  hr_employee_imageURL: 'hr_employee_imageURL'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.employeesOrderByRelevanceFieldEnum = {
  employee_FirstName: 'employee_FirstName',
  employee_LastName: 'employee_LastName',
  employee_Address: 'employee_Address',
  employee_PhoneNumber: 'employee_PhoneNumber',
  employee_Position: 'employee_Position',
  employee_Department: 'employee_Department',
  employee_TIN: 'employee_TIN',
  employee_SSSNumber: 'employee_SSSNumber',
  employee_PhilhealthNumber: 'employee_PhilhealthNumber',
  employee_emergencyContactName: 'employee_emergencyContactName',
  employee_emergencyContactNumber: 'employee_emergencyContactNumber',
  employee_imageURL: 'employee_imageURL',
  password: 'password'
};

exports.Prisma.employee_requestOrderByRelevanceFieldEnum = {
  leaverequest_reason: 'leaverequest_reason'
};

exports.Prisma.hr_employeeOrderByRelevanceFieldEnum = {
  humanresources_firstname: 'humanresources_firstname',
  humanresources_lastname: 'humanresources_lastname',
  leaverequest_reason: 'leaverequest_reason',
  password: 'password',
  hr_employee_imageURL: 'hr_employee_imageURL'
};
exports.employees_employee_Gender = exports.$Enums.employees_employee_Gender = {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other'
};

exports.employees_employee_CivilStatus = exports.$Enums.employees_employee_CivilStatus = {
  Single: 'Single',
  Married: 'Married',
  Divorced: 'Divorced'
};

exports.employees_employee_Status = exports.$Enums.employees_employee_Status = {
  Active: 'Active',
  Inactive: 'Inactive',
  On_Leave: 'On_Leave',
  Suspended: 'Suspended',
  Terminated: 'Terminated',
  Resigned: 'Resigned',
  Retired: 'Retired',
  Probation: 'Probation',
  Contract_Ended: 'Contract_Ended'
};

exports.employees_employee_ShiftSchedule = exports.$Enums.employees_employee_ShiftSchedule = {
  DayShift: 'DayShift',
  MidNight: 'MidNight',
  NightShift: 'NightShift'
};

exports.employee_request_status = exports.$Enums.employee_request_status = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

exports.employee_request_leave = exports.$Enums.employee_request_leave = {
  Vacation: 'Vacation',
  Sick: 'Sick',
  Parental: 'Parental',
  Family_Medical: 'Family_Medical',
  Unpaid: 'Unpaid',
  Personal: 'Personal',
  Public_Holiday: 'Public_Holiday',
  Religious_Observance: 'Religious_Observance',
  Sabbatical: 'Sabbatical',
  Bereavement: 'Bereavement',
  Compensatory: 'Compensatory',
  Military: 'Military',
  Jury_Duty: 'Jury_Duty',
  Garden: 'Garden',
  Election: 'Election',
  Study: 'Study',
  Adverse_Weather: 'Adverse_Weather',
  Volunteer: 'Volunteer',
  Domestic_Violence: 'Domestic_Violence',
  Disability: 'Disability'
};

exports.hr_employee_employee_Gender = exports.$Enums.hr_employee_employee_Gender = {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other'
};

exports.hr_employee_position = exports.$Enums.hr_employee_position = {
  Intern: 'Intern',
  INTERN: 'INTERN',
  HR_ASSISTANT: 'HR_ASSISTANT',
  HR_COORDINATOR: 'HR_COORDINATOR',
  RECRUITER: 'RECRUITER',
  HR_SPECIALIST: 'HR_SPECIALIST',
  HR_GENERALIST: 'HR_GENERALIST',
  HR_OFFICER: 'HR_OFFICER',
  HR_ANALYST: 'HR_ANALYST',
  HR_BUSINESS_PARTNER: 'HR_BUSINESS_PARTNER',
  HR_SUPERVISOR: 'HR_SUPERVISOR',
  HR_MANAGER: 'HR_MANAGER',
  TALENT_ACQUISITION_MANAGER: 'TALENT_ACQUISITION_MANAGER',
  COMPENSATION_AND_BENEFITS_MANAGER: 'COMPENSATION_AND_BENEFITS_MANAGER',
  TRAINING_AND_DEVELOPMENT_MANAGER: 'TRAINING_AND_DEVELOPMENT_MANAGER',
  HR_DIRECTOR: 'HR_DIRECTOR',
  VP_OF_HUMAN_RESOURCES: 'VP_OF_HUMAN_RESOURCES',
  CHIEF_HUMAN_RESOURCES_OFFICER: 'CHIEF_HUMAN_RESOURCES_OFFICER'
};

exports.hr_employee_request_leave = exports.$Enums.hr_employee_request_leave = {
  Vacation: 'Vacation',
  Sick: 'Sick',
  Parental: 'Parental',
  Family_Medical: 'Family_Medical',
  Unpaid: 'Unpaid',
  Personal: 'Personal',
  Public_Holiday: 'Public_Holiday',
  Religious_Observance: 'Religious_Observance',
  Sabbatical: 'Sabbatical',
  Bereavement: 'Bereavement',
  Compensatory: 'Compensatory',
  Military: 'Military',
  Jury_Duty: 'Jury_Duty',
  Garden: 'Garden',
  Election: 'Election',
  Study: 'Study',
  Adverse_Weather: 'Adverse_Weather',
  Volunteer: 'Volunteer',
  Domestic_Violence: 'Domestic_Violence',
  Disability: 'Disability'
};

exports.hr_employee_request_status = exports.$Enums.hr_employee_request_status = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected'
};

exports.Prisma.ModelName = {
  employees: 'employees',
  employees_attendance: 'employees_attendance',
  employee_request: 'employee_request',
  hr_employee: 'hr_employee'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
