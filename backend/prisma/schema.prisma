// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id         Int     @id @default(autoincrement())
  firstName  String
  middleName String?
  lastName   String

  contactInfos      ContactInfo[]
  employee          Employee?
  emergencyContacts EmployeeEmergencyContact[]
}

model Employee {
  id                 Int         @id @default(autoincrement())
  personId           Int         @unique
  addressId          Int         @unique
  email              String
  profileUrl         String?
  passwordHash       String
  pronouns           String
  gender             Gender
  mustChangePassword Boolean     @default(true)
  civilStatus        CivilStatus
  dateHired          DateTime
  probationEndDate   DateTime?
  dateOfBirth        DateTime

  person                      Person                       @relation(fields: [personId], references: [id])
  address                     Address                      @relation(fields: [addressId], references: [id])
  positions                   EmployeePosition[]
  attendances                 Attendance[]
  leaveRequests               LeaveRequest[]
  subordinates                EmployeePosition[]           @relation(name: "supervisorRelation")
  emergencyContacts           EmployeeEmergencyContact[]
  additonalEmployeeAttributes AdditonalEmployeeAttribute[]
}

model AdditonalEmployeeAttribute {
  id           Int           @id @default(autoincrement())
  employeeId   Int
  name         String
  isRequired   Boolean
  type         AttributeType
  booleanValue Boolean?
  stringValue  String?
  intValue     Int?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model Address {
  id         Int    @id @default(autoincrement())
  line1      String
  line2      String
  state      String
  postalCode String
  city       String

  employee Employee?
  company  Company?
}

model Company {
  id           Int     @id @default(autoincrement())
  addressId    Int     @unique
  name         String
  primaryColor String
  logoUrl      String?

  address     Address      @relation(fields: [addressId], references: [id])
  departments Department[]
}

model Department {
  id        Int    @id @default(autoincrement())
  companyId Int
  name      String

  positions Position[]
  company   Company    @relation(fields: [companyId], references: [id])
}

model Position {
  id           Int          @id @default(autoincrement())
  departmentId Int
  name         String
  type         PositionType

  department Department         @relation(fields: [departmentId], references: [id])
  employees  EmployeePosition[]
}

model EmployeePosition {
  id                Int       @id @default(autoincrement())
  employeeId        Int
  positionId        Int
  supervisorId      Int?
  salary            BigInt
  startWorkHour     Int
  startWorkMinute   Int
  endWorkHour       Int
  endWorkMinute     Int
  hourlyBasicPay    Int
  hourlyOvertimePay Int
  hourlyLeavePay    Int
  dateStarted       DateTime
  dateEnded         DateTime?

  employee   Employee  @relation(fields: [employeeId], references: [id])
  position   Position  @relation(fields: [positionId], references: [id])
  supervisor Employee? @relation(name: "supervisorRelation", fields: [supervisorId], references: [id])
  payslips   Payslip[]
}

model Attendance {
  id         Int       @id @default(autoincrement())
  employeeId Int
  timeIn     DateTime
  timeOut    DateTime?

  employee Employee @relation(fields: [employeeId], references: [id])
}

model LeaveRequest {
  id          Int                @id @default(autoincrement())
  employeeId  Int
  status      LeaveRequestStatus
  reason      LeaveReason
  startDate   DateTime
  endDate     DateTime
  dateCreated DateTime           @default(now())

  employee Employee @relation(fields: [employeeId], references: [id])
}

model ContactInfo {
  id       Int         @id @default(autoincrement())
  personId Int
  type     ContactType
  number   String

  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
}

model EmployeeEmergencyContact {
  id           Int                          @id @default(autoincrement())
  employeeId   Int
  personId     Int
  relationship EmergencyContactRelationship

  person   Person   @relation(fields: [personId], references: [id])
  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Payslip {
  id                 Int      @id @default(autoincrement())
  employeePositionId Int
  dateCreated        DateTime
  payPeriodStart     DateTime
  payPeriodEnd       DateTime

  employeePosition EmployeePosition @relation(fields: [employeePositionId], references: [id])
  payslipItems     PayslipItem[]
}

model PayslipItem {
  id        Int             @id @default(autoincrement())
  payslipId Int
  name      String
  type      PayslipItemType
  amount    Int

  payslip Payslip @relation(fields: [payslipId], references: [id])
}

enum ContactType {
  Landline
  Mobile
}

enum EmergencyContactRelationship {
  Parent
  Sibling
  Spouse
  Child
  Guardian
  Other
}

enum LeaveReason {
  Sick
  Vacation
  PaternalMaternal
}

enum LeaveRequestStatus {
  Pending
  Cancelled
  Rejected
  Approved
}

enum PositionType {
  FullTime
  PartTime
  Intern
  Contractor
}

enum CivilStatus {
  Single
  Married
  Divorced
  Widowed
}

enum EmploymentStatus {
  Active
  Inactive
  OnLeave
  Suspended
  Terminated
  Resigned
  Retired
  Probation
  ContractEnded
}

enum Gender {
  Male
  Female
  Other
}

enum AttributeType {
  Boolean
  String
  Int
}

enum PayslipItemType {
  Earning
  Deduction
}
