// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Person {
  id                Int                        @id @default(autoincrement())
  publicId          String                     @unique
  firstName         String
  middleName        String?
  lastName          String
  contactInfos      ContactInfo[]
  employee          Employee?
  emergencyContacts EmployeeEmergencyContact[]
}

model Employee {
  id                 Int                        @id @default(autoincrement())
  publicId           String                     @unique
  personId           Int                        @unique
  email              String
  profileUrl         String?
  passwordHash       String
  pronouns           String
  sss                String
  tin                String
  philhealth         String
  address            String
  gender             Gender
  mustChangePassword Boolean                    @default(true)
  civilStatus        CivilStatus
  type               EmploymentType
  dateHired          DateTime
  probationEndDate   DateTime?
  dateOfBirth        DateTime
  dateDeleted        DateTime?
  person             Person                     @relation(fields: [personId], references: [id])
  positions          EmployeePosition[]
  attendances        Attendance[]
  leaveRequests      LeaveRequest[]
  subordinates       EmployeePosition[]         @relation(name: "supervisorRelation")
  emergencyContacts  EmployeeEmergencyContact[]
}

model Department {
  id          Int        @id @default(autoincrement())
  publicId    String     @unique
  name        String
  dateDeleted DateTime?
  positions   Position[]
}

model Position {
  id           Int                @id @default(autoincrement())
  publicId     String             @unique
  departmentId Int
  name         String
  dateDeleted  DateTime?
  department   Department         @relation(fields: [departmentId], references: [id])
  employees    EmployeePosition[]
}

model EmployeePosition {
  id              Int       @id @default(autoincrement())
  publicId        String    @unique
  employeeId      Int
  positionId      Int
  supervisorId    Int?
  salary          BigInt
  startWorkHour   Int
  startWorkMinute Int
  endWorkHour     Int
  endWorkMinute   Int
  dateStarted     DateTime
  dateEnded       DateTime?
  employee        Employee  @relation(fields: [employeeId], references: [id])
  position        Position  @relation(fields: [positionId], references: [id])
  supervisor      Employee? @relation(name: "supervisorRelation", fields: [supervisorId], references: [id])
}

model Attendance {
  id         Int       @id @default(autoincrement())
  publicId   String    @unique
  employeeId Int
  timeIn     DateTime
  timeOut    DateTime?
  employee   Employee  @relation(fields: [employeeId], references: [id])
}

model LeaveRequest {
  id         Int                @id @default(autoincrement())
  publicId   String             @unique
  employeeId Int
  status     LeaveRequestStatus
  reason     LeaveReason
  startDate  DateTime
  endDate    DateTime
  employee   Employee           @relation(fields: [employeeId], references: [id])
}

model ContactInfo {
  id       Int         @id @default(autoincrement())
  publicId String      @unique
  personId Int
  type     ContactType
  number   String
  person   Person      @relation(fields: [personId], references: [id])
}

model EmployeeEmergencyContact {
  id           Int                          @id @default(autoincrement())
  publicId     String                       @unique
  employeeId   Int
  personId     Int
  relationship EmergencyContactRelationship
  person       Person                       @relation(fields: [personId], references: [id])
  employee     Employee                     @relation(fields: [employeeId], references: [id])
}

enum ContactType {
  Landline
  Mobile
}

enum EmergencyContactRelationship {
  Parent
  Sibling
  Spouse
  Child
  Guardian
  Other
}

enum LeaveReason {
  Sick
  Vacation
  PaternalMaternal
}

enum LeaveRequestStatus {
  Pending
  Cancelled
  Rejected
  Approved
}

enum EmploymentType {
  FullTime
  PartTime
  Intern
  Contractor
}

enum CivilStatus {
  Single
  Married
  Divorced
  Widowed
}

enum EmploymentStatus {
  Active
  Inactive
  OnLeave
  Suspended
  Terminated
  Resigned
  Retired
  Probation
  ContractEnded
}

enum Gender {
  Male
  Female
  Other
}

model employees {
  employeeId       Int    @id @default(autoincrement()) @db.UnsignedInt
  employee_Address String @db.Text
}
